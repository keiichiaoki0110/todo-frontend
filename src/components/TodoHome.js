import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import apiClient from '../api/client';

// TaskFilter„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà
const TaskFilter = ({ filter, setFilter }) => {
    const filterStyle = {
        display: 'flex',
        justifyContent: 'center',
        gap: '10px',
        margin: '20px 0'
    };

    const buttonStyle = {
        padding: '8px 16px',
        fontSize: '14px',
        border: '1px solid #ccc',
        backgroundColor: '#f8f9fa',
        cursor: 'pointer',
        borderRadius: '4px'
    };

    const activeButtonStyle = {
        ...buttonStyle,
        backgroundColor: '#007bff',
        color: '#fff',
        border: '1px solid #007bff'
    };

    return (
        <div style={filterStyle}>
            <button
                style={filter === 'all' ? activeButtonStyle : buttonStyle}
                onClick={() => setFilter('all')}
            >
                ÂÖ®„Å¶
            </button>
            <button
                style={filter === 'completed' ? activeButtonStyle : buttonStyle}
                onClick={() => setFilter('completed')}
            >
                ÂÆå‰∫Ü
            </button>
            <button
                style={filter === 'incomplete' ? activeButtonStyle : buttonStyle}
                onClick={() => setFilter('incomplete')}
            >
                Êú™ÂÆå‰∫Ü
            </button>
        </div>
    );
};

// TaskItem„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà
const TaskItem = ({ task, onToggleComplete, onDelete, onUpdate }) => {
    const [isEditing, setIsEditing] = useState(false);
    const [editedTitle, setEditedTitle] = useState(task.title || '');
    const [editedDetails, setEditedDetails] = useState(task.details || '');

    const handleSave = () => {
        onUpdate(task.id, editedTitle, editedDetails);
        setIsEditing(false);
    };

    const itemStyle = {
        padding: '15px',
        borderBottom: '1px solid #ddd',
        marginBottom: '10px',
    };

    const textStyle = {
        whiteSpace: 'pre-wrap',
        textDecoration: task.completed ? 'line-through' : 'none',
        color: task.completed ? '#28a745' : '#000',
    };

    const inputStyle = {
        padding: '10px',
        fontSize: '16px',
        width: '100%',
        boxSizing: 'border-box',
        marginBottom: '10px',
    };

    const buttonStyle = {
        padding: '5px 10px',
        fontSize: '14px',
        backgroundColor: '#28a745',
        color: '#fff',
        border: 'none',
        cursor: 'pointer',
        marginRight: '5px',
    };

    const editButtonStyle = {
        ...buttonStyle,
        backgroundColor: '#007bff',
    };

    const deleteButtonStyle = {
        ...buttonStyle,
        backgroundColor: '#dc3545',
    };

    if (!task || !task.id) return null;

    return (
        <li style={itemStyle}>
            {isEditing ? (
                <>
                    <input
                        type="text"
                        value={editedTitle}
                        onChange={(e) => setEditedTitle(e.target.value)}
                        style={inputStyle}
                    />
                    <textarea
                        value={editedDetails}
                        onChange={(e) => setEditedDetails(e.target.value)}
                        style={{ ...inputStyle, height: '80px' }}
                    />
                    <button onClick={handleSave} style={buttonStyle}>
                        ‰øùÂ≠ò
                    </button>
                    <button onClick={() => setIsEditing(false)} style={deleteButtonStyle}>
                        „Ç≠„É£„É≥„Çª„É´
                    </button>
                </>
            ) : (
                <>
                    <h3 style={textStyle} onClick={() => onToggleComplete(task.id)}>
                        {task.title}
                    </h3>
                    <p style={textStyle} onClick={() => onToggleComplete(task.id)}>
                        {task.details}
                    </p>
                    <small>‰ΩúÊàêÊó•ÊôÇ: {new Date(task.createdAt).toLocaleString()}</small>
                    <br />
                    <small>Êõ¥Êñ∞Êó•ÊôÇ: {new Date(task.updatedAt).toLocaleString()}</small>
                    <br />
                    <button onClick={() => setIsEditing(true)} style={editButtonStyle}>
                        Á∑®ÈõÜ
                    </button>
                    <button onClick={() => onDelete(task.id)} style={deleteButtonStyle}>
                        ÂâäÈô§
                    </button>
                </>
            )}
        </li>
    );
};

// TaskList„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà
const TaskList = ({ tasks, onToggleComplete, onDelete, onUpdate }) => {
    const listStyle = {
        listStyleType: 'none',
        padding: '0',
        margin: '20px 0'
    };

    if (tasks.length === 0) {
        return <p style={{ textAlign: 'center', color: '#666', fontStyle: 'italic' }}>„Çø„Çπ„ÇØ„Åå„ÅÇ„Çä„Åæ„Åõ„Çì</p>;
    }

    return (
        <ul style={listStyle}>
            {tasks.map(task => (
                <TaskItem
                    key={task.id}
                    task={task}
                    onToggleComplete={onToggleComplete}
                    onDelete={onDelete}
                    onUpdate={onUpdate}
                />
            ))}
        </ul>
    );
};

// „É°„Ç§„É≥„ÅÆTodoHome„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà
const TodoHome = ({ currentUser, handleLogout }) => {
    const navigate = useNavigate();
    
    // „Çø„Çπ„ÇØ„É™„Çπ„Éà„ÅÆÁä∂ÊÖã
    const [tasks, setTasks] = useState([]);
    // ÂÖ•Âäõ„Åï„Çå„Åü„Çø„Çπ„ÇØ„Çø„Ç§„Éà„É´
    const [title, setTitle] = useState('');
    // ÂÖ•Âäõ„Åï„Çå„Åü„Çø„Çπ„ÇØË©≥Á¥∞
    const [details, setDetails] = useState('');
    // „Éï„Ç£„É´„Çø„É™„É≥„Ç∞„ÅÆÁä∂ÊÖã('all', 'completed', 'incomplete')
    const [filter, setFilter] = useState('all');
    // „Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏
    const [error, setError] = useState('');
    // „É≠„Éº„Éá„Ç£„É≥„Ç∞Áä∂ÊÖã
    const [loading, setLoading] = useState(false);
    
    // „Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„Éû„Ç¶„É≥„ÉàÊôÇ„Å´„Çø„Çπ„ÇØ„ÇíÂèñÂæó
    useEffect(() => {
        fetchTasks();
    }, []);

    // „Çø„Çπ„ÇØ‰∏ÄË¶ß„ÇíÂèñÂæó„Åô„ÇãÈñ¢Êï∞
    const fetchTasks = async () => {
        try {
            setLoading(true);
            console.log('üìã „Çø„Çπ„ÇØ‰∏ÄË¶ß„ÇíÂèñÂæó‰∏≠...');
            const response = await apiClient.get('/todos');
            console.log('‚úÖ „Çø„Çπ„ÇØÂèñÂæóÊàêÂäü:', response.data);
            setTasks(response.data);
        } catch (error) {
            console.error('‚ùå „Çø„Çπ„ÇØÂèñÂæó„Ç®„É©„Éº:', error);
            setError('„Çø„Çπ„ÇØ„ÅÆÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
        } finally {
            setLoading(false);
        }
    };

    const handleLogoutClick = () => {
        localStorage.removeItem('access_token');
        handleLogout();
        navigate('/login');
    };

    // „Çø„Çπ„ÇØ„ÇíËøΩÂä†„Åô„ÇãÈñ¢Êï∞
    const handleAddTask = async (e) => {
        e.preventDefault();

        // „Çø„Ç§„Éà„É´„ÅÆÊñáÂ≠óÊï∞Âà∂Èôê„ÉÅ„Çß„ÉÉ„ÇØ
        if (title.length > 25) {
            setError('„Çø„Ç§„Éà„É´„ÅØ25ÊñáÂ≠ó‰ª•ÂÜÖ„ÅßÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
            return;
        }

        // ÂøÖÈ†àÈ†ÖÁõÆ„ÉÅ„Çß„ÉÉ„ÇØ
        if (!title || !details) {
            setError('„Çø„Ç§„Éà„É´„Å®Ë©≥Á¥∞„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
            return;
        }

        try {
            setError(''); // „Ç®„É©„Éº„Çí„ÇØ„É™„Ç¢
            setLoading(true);
            
            console.log('‚ûï „Çø„Çπ„ÇØ‰ΩúÊàê‰∏≠...', { title, details });
            const response = await apiClient.post('/todos', {
                title: title.trim(),
                details: details.trim()
            });
            
            console.log('‚úÖ „Çø„Çπ„ÇØ‰ΩúÊàêÊàêÂäü:', response.data);
            
            // „Çø„Çπ„ÇØ„É™„Çπ„Éà„ÇíÂÜçÂèñÂæó
            await fetchTasks();
            
            // ÂÖ•Âäõ„Éï„Ç£„Éº„É´„Éâ„Çí„É™„Çª„ÉÉ„Éà
            setTitle('');
            setDetails('');
        } catch (error) {
            console.error('‚ùå „Çø„Çπ„ÇØ‰ΩúÊàê„Ç®„É©„Éº:', error);
            setError('„Çø„Çπ„ÇØ„ÅÆ‰ΩúÊàê„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
        } finally {
            setLoading(false);
        }
    };

    // „Çø„Çπ„ÇØ„ÅÆÂÆå‰∫Ü/Êú™ÂÆå‰∫Ü„ÇíÂàá„ÇäÊõø„Åà„ÇãÈñ¢Êï∞
    const handleToggleComplete = async (taskId) => {
        try {
            console.log('üîÑ „Çø„Çπ„ÇØÁä∂ÊÖãÂàá„ÇäÊõø„Åà‰∏≠...', taskId);
            const response = await apiClient.put(`/todos/${taskId}/toggle`);
            console.log('‚úÖ „Çø„Çπ„ÇØÁä∂ÊÖãÂàá„ÇäÊõø„ÅàÊàêÂäü:', response.data);
            
            // „Çø„Çπ„ÇØ„É™„Çπ„Éà„ÇíÂÜçÂèñÂæó
            await fetchTasks();
        } catch (error) {
            console.error('‚ùå „Çø„Çπ„ÇØÁä∂ÊÖãÂàá„ÇäÊõø„Åà„Ç®„É©„Éº:', error);
            setError('„Çø„Çπ„ÇØ„ÅÆÁä∂ÊÖãÂ§âÊõ¥„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
        }
    };

    // „Çø„Çπ„ÇØ„ÇíÂâäÈô§„Åô„ÇãÈñ¢Êï∞
    const handleDelete = async (taskId) => {
        if (window.confirm('„Åì„ÅÆ„Çø„Çπ„ÇØ„ÇíÂâäÈô§„Åó„Åæ„Åô„ÅãÔºü')) {
            try {
                console.log('üóëÔ∏è „Çø„Çπ„ÇØÂâäÈô§‰∏≠...', taskId);
                await apiClient.delete(`/todos/${taskId}`);
                console.log('‚úÖ „Çø„Çπ„ÇØÂâäÈô§ÊàêÂäü');
                
                // „Çø„Çπ„ÇØ„É™„Çπ„Éà„ÇíÂÜçÂèñÂæó
                await fetchTasks();
            } catch (error) {
                console.error('‚ùå „Çø„Çπ„ÇØÂâäÈô§„Ç®„É©„Éº:', error);
                setError('„Çø„Çπ„ÇØ„ÅÆÂâäÈô§„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
            }
        }
    };

    // „Çø„Çπ„ÇØ„ÇíÊõ¥Êñ∞„Åô„ÇãÈñ¢Êï∞
    const handleUpdate = async (taskId, newTitle, newDetails) => {
        try {
            console.log('‚úèÔ∏è „Çø„Çπ„ÇØÊõ¥Êñ∞‰∏≠...', taskId, { title: newTitle, details: newDetails });
            const response = await apiClient.put(`/todos/${taskId}`, {
                title: newTitle.trim(),
                details: newDetails.trim()
            });
            console.log('‚úÖ „Çø„Çπ„ÇØÊõ¥Êñ∞ÊàêÂäü:', response.data);
            
            // „Çø„Çπ„ÇØ„É™„Çπ„Éà„ÇíÂÜçÂèñÂæó
            await fetchTasks();
        } catch (error) {
            console.error('‚ùå „Çø„Çπ„ÇØÊõ¥Êñ∞„Ç®„É©„Éº:', error);
            setError('„Çø„Çπ„ÇØ„ÅÆÊõ¥Êñ∞„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
        }
    };

    // „Éï„Ç£„É´„Çø„É™„É≥„Ç∞„Åï„Çå„Åü„Çø„Çπ„ÇØ„É™„Çπ„Éà„ÇíÂèñÂæó
    const filteredTasks = tasks.filter((task) => {
        if (filter === 'completed') return task.completed;
        if (filter === 'incomplete') return !task.completed;
        return true;
    });

    // „Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„ÅÆ„Çπ„Çø„Ç§„É´Ë®≠ÂÆö
    const containerStyle = { width: '600px', margin: '0 auto', padding: '20px' };
    const headerStyle = { display: 'flex', justifyContent: 'space-between', marginBottom: '20px' };
    const formStyle = { display: 'flex', flexDirection: 'column', gap: '15px', marginTop: '20px' };
    const inputStyle = { padding: '10px', fontSize: '16px', width: '100%', boxSizing: 'border-box' };
    const errorStyle = { color: 'red', fontSize: '14px' };
    const logoutButtonStyle = { padding: '10px', fontSize: '16px', backgroundColor: '#dc3545', color: '#fff', border: 'none', cursor: 'pointer' };

    return (
        <div style={containerStyle}>
            {/* „Éò„ÉÉ„ÉÄ„Éº: „É¶„Éº„Ç∂„ÉºÂêç„Å®„É≠„Ç∞„Ç¢„Ç¶„Éà„Éú„Çø„É≥ */}
            <header style={headerStyle}>
                <div>{currentUser}„Åß„É≠„Ç∞„Ç§„É≥‰∏≠</div>
                <button style={logoutButtonStyle} onClick={handleLogoutClick}>
                    „É≠„Ç∞„Ç¢„Ç¶„Éà
                </button>
            </header>

            {/* „Çø„Çπ„ÇØËøΩÂä†„Éï„Ç©„Éº„É† */}
            <form style={formStyle} onSubmit={handleAddTask}>
                <input
                    type="text"
                    placeholder="„Çø„Çπ„ÇØ„Çø„Ç§„Éà„É´ (25ÊñáÂ≠ó‰ª•ÂÜÖ)"
                    value={title}
                    onChange={(e) => setTitle(e.target.value)}
                    style={inputStyle}
                    disabled={loading}
                />
                <textarea
                    placeholder="„Çø„Çπ„ÇØË©≥Á¥∞"
                    value={details}
                    onChange={(e) => setDetails(e.target.value)}
                    style={{ ...inputStyle, height: '120px' }}
                    disabled={loading}
                />
                {error && <p style={errorStyle}>{error}</p>}
                <button 
                    type="submit" 
                    style={{ 
                        padding: '10px', 
                        fontSize: '16px', 
                        backgroundColor: loading ? '#ccc' : '#28a745', 
                        color: '#fff', 
                        border: 'none', 
                        cursor: loading ? 'not-allowed' : 'pointer' 
                    }}
                    disabled={loading}
                >
                    {loading ? 'Âá¶ÁêÜ‰∏≠...' : 'ËøΩÂä†'}
                </button>
            </form>

            {/* „Éï„Ç£„É´„Çø„É™„É≥„Ç∞„Éú„Çø„É≥ */}
            <TaskFilter filter={filter} setFilter={setFilter} />

            {/* „É≠„Éº„Éá„Ç£„É≥„Ç∞Ë°®Á§∫ */}
            {loading && <p style={{ textAlign: 'center' }}>Ë™≠„ÅøËæº„Åø‰∏≠...</p>}

            {/* „Çø„Çπ„ÇØ„É™„Çπ„Éà */}
            <TaskList 
                tasks={filteredTasks} 
                onToggleComplete={handleToggleComplete}
                onDelete={handleDelete}
                onUpdate={handleUpdate}
            />
        </div>
    );
};

export default TodoHome;